Контрольные вопросы:

1) использование контейнеров множество и отображение

Множества и мультимножества автоматически упорядочивают свои элементы
в соответствии с заданным критерием. Основное преимущество, что 
бинарное дерево допускает эффективный поиск конкретного значения. 
Сложность – О(logN). Но нельзя менять значения элементов непосредственно.
Отображения – контейнеры(ключ-значение). Автоматически упорядочивают 
свои элементы в соответствии с определенным критерием сортировки. 
Можно использовать как ассоциативные массивы. И опять поиск по элементу.

2) требования для хеш-функций?

Функция должна равномерно распределяющую разные значения элементов в 
интервале(0 size_t).

1 -  детерминированность - одинаковые объекты -- одинаковые хеши
2 - быстрое вычисление хеша - не зависит от N(количество объектов, 
хранящихся уже в таблице), зависит от объекта(длины ключа) - length(key)
3 - равномерность

3) коллизии и как их разрешить

Коллизии возникают из-за того, что хеш-функция выдает одинаковое 
натуральное число для разных элементов.

решение коллизий:

1 - метод цепочек forward_list/{list}
2 - метод открытой адресации - новый элемент размещается в ближайшей 
свободной ячейки

4) сложность основных операций хэш-таблиц в худшем случае O(N)

Так как самый худший случай, это когда нам придется пробежать всю 
таблицу для, например, решения коллизии методом открытой адресации, 
а это получается N слотов.

5)  способности инструмента создания контейнеров Boost.Multiindex?

Данный инструмент позволяет нам комбинировать хэш-таблицы, вектора 
и set. То есть элементы должны быть доступны по-разному и хранятся 
в разных контейнерах. Или когда у элементов несколько свойств, по 
которым их ищут(животные – имя, количество ног). Можно построить 
очень эффективные по доступу структуры данных связанными между собой
например умными указателями где для каждой операции довольно легко 
предсказать затраты на доступ к тем или иным данным. Получается 
некая база данных.