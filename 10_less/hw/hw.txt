Контрольные вопросы:

1 - OSI

1 - Прикладной уровень — верхний уровень модели, обеспечивающий взаимодействие пользовательских приложений с сетью
2 - Уровень представления обеспечивает преобразование протоколов и кодирование/декодирование данных
3 - Сеансовый уровень модели обеспечивает поддержание сеанса связи, позволяя приложениям взаимодействовать между собой длительное время
4 - Транспортный уровень модели предназначен для обеспечения надёжной передачи данных от отправителя к получателю
5 - Сетевой уровень модели предназначен для определения пути передачи данных
6 - Канальный уровень предназначен для обеспечения взаимодействия сетей на физическом уровне и контроля ошибок, которые могут возникнуть
7 - Физический уровень — нижний уровень модели, который определяет метод передачи данных, представленных в двоичном виде, от одного устройства (компьютера) к другому

2 - TCP и UDP

TCP (протокол управления передачей) 
1 - обеспечивает передачу информации, проверяя дошла ли она;
2 - проверяет насколько полным является объем полученной информации;
3 - дает возможность двум хостам производить обмен пакетами через установку соединения. 
4 - предоставляет услугу для приложений, повторно запрашивает потерянную информацию, устраняет дублирующие пакеты, регулируя загруженность сети. 
5 - гарантирует получение и сборку информации у адресата в правильном порядке.
6 -  требует явного указания максимального размера сегмента (MSS) в случае, если виртуальное соединение осуществляется через сегмент сети,
где максимальный размер блока (MTU) менее, чем стандартный MTU Ethernet (1500 байт).

UDP (протокол пользовательских датаграмм)
1 - занимается передачей автономных датаграмм.
2 - не гарантирует, что всех датаграммы дойдут до получателя. 
3 - позволяет отправлять информацию (датаграммы) по IP-сети без предварительного установления соединения и создания специального виртуального канала или путей данных.

3 - Сетевое взаимодействие.

Для сетевого взаимодействия нужны адреса и протоколы – принятые соглашения для обмена данных.

4 - Функции активных/пассивных сокетов.

Активный сокет осуществляет взаимодействие между сервером и пользователями (через него читаем и пишем). 

Пассивный сокет проверяет запросы на взаимодействие и, если с какого-нибудь адреса подали запрос на взаимодействие с сервером,
передаёт работу с клиентом активному сокету.

5 - Логическое соединение протокола.

Для TCP-сервера:
1.	Делает пассивный сокер - acceptor 
2.	связывает с ним порт – bind(endpoint)
3.	Переводит в режим прослушки listen(size)
4.	Делает активный сокет - socet
5.	Передаёт в активный сокет – accept(socet)

Для TCP-клиента:
1.	Делает активный сокет
2.	Осуществляет коннект: socet.connect()

