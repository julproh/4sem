Контрольные вопросы

1 - Механизм генерации случайных чисел в библиотеке рандом.

В random сожержатся несколько распределений и генераторов случайных чисел. ГСЧ порождают случайные значения равномерно распределенные от минимального до максимального значений, а затем распределения
 преобразуют эти значения с лучайные числа.

2 - Отличие функторов от лямбда-функций.

Функциональный объект является экземпляром класса С++, в котором определён operator(). Если вы определите operator() для C++ класса, то вы получите объект, который действует как функция, но может также хранить состояние. 
В то время, как лямбда-выражение позволяет определить анонимную функцию внутри другой функции.

    1 - функторы могут обладают бо'льшими возможностями 
    2 - каждый функтор имеет свой тип 
    3 - работают быстрее, чем указатель на функцию
    4 - с помощью лямбда-выражений проще передать функциям алгоритмы, если это требует компактности

3 - Итераторы различных категорий.
    
    output iterator - запись в прямом направлении
        =, !=, ==, ++,*, ->
    input iterator - чтение в прямом направлении
        =, !=, ==, ++, *, ->
    forward iterator - чтение в прямом направлении
        =, !=, ==, ++, *, ->, многопроходность
    bidirectional iterator - чтение в прямом и обратном направлении
        =, !=, ==, ++, --, *, ->, многопроходность
    random access iterator - чтение с произвольным доступом
        =, !=, ==, ++, --, *, ->, <, >, <=, >=, [n], сдвиг на n элементов, разность итераторов, многопроходность
    

    Итератор на vector
        1 - выполняет операцию разыменования
        2 - может быть инкрементирован/декрементирован
        3 - можно применять арифметические операции
        4 - сравнивать на равенство
        5 - передавать переменной разницу итераторов

    Итератор на list, set, map
        1 - применять инкремент/декремент
        2 - операция разыменования
        3 - сравнивать на равенство и неравенство


4 - Классификация предлагается для алгоритмов стандартной библиотеки.

    1. Немодифицируещие алгоритмы - не изменяют ни порядок, ни значение обрабатываемых элементов.(работают с итераторами ввода и одноправленными итераторами, применимы ко всем стандартным контейнерам)
    2. Модифицирующие алгоритмы - изменяют значения элементов
    3. Алгоритмы удаления - специальная разновидность модифицирующих алгоритмов
    4. Перестановочные алгоритмы - изменяют порядок элементов(не значения), присваивая и обменивая их значения
    5. Алгоритмы сортировки - специальная разновидность перестановочных алгоритмов(изменяют порядок следования элементов)
    6. Алгоритмы для упорядоченных диапазонов - требуют, что бы диапазоны были отсортированы
    7. Численные алгоритмы - объединяют числовые элементы разными способами

5 - Алгоритмы стандартной библиотеки и собственные.
    Алгоритмы стандартной библиотеки предпочтительнее, потому что они 
    уже протестированны, эффективны и имеют поддержку множества различных типов
     контейнеров.
